from plotpy.widgets.colormap.widget import EditableColormap
from qwt import QwtLinearColorMap
import numpy as np

# Color positions and RGB values
color_positions = [
    0.000000,  # (255, 255, 255)
    0.001000,  # (0, 0, 255)
    0.104301,  # (21, 146, 255)
    0.207527,  # (0, 202, 238)
    0.361290,  # (7, 166, 31)
    0.545161,  # (221, 221, 0)
    0.765591,  # (227, 144, 0)
    0.920430,  # (255, 0, 0)
    1.000000,  # (128, 0, 0)
]

# RGB color values (0-1 scale)
rgb_colors = [
    [1.000000, 1.000000, 1.000000],
    [0.000000, 0.000000, 1.000000],
    [0.082353, 0.572549, 1.000000],
    [0.000000, 0.792157, 0.933333],
    [0.027451, 0.650980, 0.121569],
    [0.866667, 0.866667, 0.000000],
    [0.890196, 0.564706, 0.000000],
    [1.000000, 0.000000, 0.000000],
    [0.501961, 0.000000, 0.000000],
]

# Create the colormap
def create_colormap(name='custom_colormap'):
    # Create base colormap with first and last color
    color1_rgb = 4294967295
    color2_rgb = 4286578688
    colormap = EditableColormap(color1_rgb, color2_rgb, name=name)

    # Add intermediate color stops
    colormap.addColorStop(0.001000, 4278190335)
    colormap.addColorStop(0.104301, 4279603967)
    colormap.addColorStop(0.207527, 4278242030)
    colormap.addColorStop(0.361290, 4278691359)
    colormap.addColorStop(0.545161, 4292730112)
    colormap.addColorStop(0.765591, 4293103616)
    colormap.addColorStop(0.920430, 4294901760)

    return colormap

# Full RGB values for the colormap
# Number of colors: 256
def get_rgb_array(num_colors=None):
    if num_colors is None:
        num_colors = 256
    result = []
    for i in range(num_colors):
        pos = i / (num_colors - 1)
        # Get color from the stops by interpolation
        result.append(interpolate_color(pos))
    return np.array(result)

def interpolate_color(pos):
    # Find the two stops to interpolate between
    for i in range(len(color_positions)-1):
        if color_positions[i] <= pos <= color_positions[i+1]:
            # Calculate interpolation factor
            factor = (pos - color_positions[i]) / (color_positions[i+1] - color_positions[i])
            
            # Get RGB values of the two stops
            c1 = rgb_colors[i]
            c2 = rgb_colors[i+1]
            
            # Interpolate RGB values
            r = int((1-factor) * c1[0] * 255 + factor * c2[0] * 255)
            g = int((1-factor) * c1[1] * 255 + factor * c2[1] * 255)
            b = int((1-factor) * c1[2] * 255 + factor * c2[2] * 255)
            
            return [r, g, b]
    
    # If pos is outside the range, return the closest stop
    if pos <= color_positions[0]:
        return [int(rgb_colors[0][0] * 255), int(rgb_colors[0][1] * 255), int(rgb_colors[0][2] * 255)]
    else:
        last = len(rgb_colors) - 1
        return [int(rgb_colors[last][0] * 255), int(rgb_colors[last][1] * 255), int(rgb_colors[last][2] * 255)]

# Pre-generated RGB values for convenience
_rgb_array_256 = [
    [255, 255, 255],
    [1, 4, 255],
    [1, 10, 255],
    [2, 15, 255],
    [3, 21, 255],
    [4, 26, 255],
    [5, 32, 255],
    [5, 37, 255],
    [6, 43, 255],
    [7, 48, 255],
    [8, 54, 255],
    [9, 60, 255],
    [9, 65, 255],
    [10, 71, 255],
    [11, 76, 255],
    [12, 82, 255],
    [13, 87, 255],
    [13, 93, 255],
    [14, 98, 255],
    [15, 104, 255],
    [16, 109, 255],
    [17, 115, 255],
    [17, 121, 255],
    [18, 126, 255],
    [19, 132, 255],
    [20, 137, 255],
    [21, 143, 255],
    [21, 147, 255],
    [20, 149, 254],
    [19, 151, 253],
    [18, 153, 253],
    [17, 155, 252],
    [17, 157, 252],
    [16, 160, 251],
    [15, 162, 250],
    [14, 164, 250],
    [13, 166, 249],
    [13, 168, 248],
    [12, 170, 248],
    [11, 172, 247],
    [10, 175, 246],
    [10, 177, 246],
    [9, 179, 245],
    [8, 181, 244],
    [7, 183, 244],
    [6, 185, 243],
    [6, 187, 242],
    [5, 189, 242],
    [4, 192, 241],
    [3, 194, 241],
    [2, 196, 240],
    [2, 198, 239],
    [1, 200, 239],
    [0, 202, 238],
    [0, 201, 232],
    [0, 200, 227],
    [1, 199, 222],
    [1, 198, 216],
    [1, 197, 211],
    [1, 196, 206],
    [1, 195, 201],
    [1, 195, 195],
    [2, 194, 190],
    [2, 193, 185],
    [2, 192, 180],
    [2, 191, 174],
    [2, 190, 169],
    [3, 189, 164],
    [3, 188, 158],
    [3, 187, 153],
    [3, 186, 148],
    [3, 185, 143],
    [3, 184, 137],
    [4, 184, 132],
    [4, 183, 127],
    [4, 182, 121],
    [4, 181, 116],
    [4, 180, 111],
    [4, 179, 106],
    [5, 178, 100],
    [5, 177, 95],
    [5, 176, 90],
    [5, 175, 84],
    [5, 174, 79],
    [6, 173, 74],
    [6, 173, 69],
    [6, 172, 63],
    [6, 171, 58],
    [6, 170, 53],
    [6, 169, 48],
    [7, 168, 42],
    [7, 167, 37],
    [7, 166, 32],
    [11, 167, 30],
    [16, 168, 30],
    [20, 169, 29],
    [25, 171, 28],
    [29, 172, 28],
    [34, 173, 27],
    [38, 174, 26],
    [43, 175, 26],
    [47, 176, 25],
    [52, 178, 24],
    [57, 179, 24],
    [61, 180, 23],
    [66, 181, 22],
    [70, 182, 22],
    [75, 183, 21],
    [79, 185, 21],
    [84, 186, 20],
    [89, 187, 19],
    [93, 188, 19],
    [98, 189, 18],
    [102, 190, 17],
    [107, 192, 17],
    [111, 193, 16],
    [116, 194, 15],
    [121, 195, 15],
    [125, 196, 14],
    [130, 198, 13],
    [134, 199, 13],
    [139, 200, 12],
    [143, 201, 11],
    [148, 202, 11],
    [152, 203, 10],
    [157, 205, 9],
    [162, 206, 9],
    [166, 207, 8],
    [171, 208, 7],
    [175, 209, 7],
    [180, 210, 6],
    [184, 212, 5],
    [189, 213, 5],
    [194, 214, 4],
    [198, 215, 3],
    [203, 216, 3],
    [207, 217, 2],
    [212, 219, 1],
    [216, 220, 1],
    [221, 221, 0],
    [221, 220, 0],
    [221, 218, 0],
    [221, 217, 0],
    [221, 216, 0],
    [222, 214, 0],
    [222, 213, 0],
    [222, 211, 0],
    [222, 210, 0],
    [222, 209, 0],
    [222, 207, 0],
    [222, 206, 0],
    [222, 205, 0],
    [222, 203, 0],
    [222, 202, 0],
    [223, 200, 0],
    [223, 199, 0],
    [223, 198, 0],
    [223, 196, 0],
    [223, 195, 0],
    [223, 194, 0],
    [223, 192, 0],
    [223, 191, 0],
    [223, 190, 0],
    [224, 188, 0],
    [224, 187, 0],
    [224, 185, 0],
    [224, 184, 0],
    [224, 183, 0],
    [224, 181, 0],
    [224, 180, 0],
    [224, 179, 0],
    [224, 177, 0],
    [225, 176, 0],
    [225, 174, 0],
    [225, 173, 0],
    [225, 172, 0],
    [225, 170, 0],
    [225, 169, 0],
    [225, 168, 0],
    [225, 166, 0],
    [225, 165, 0],
    [225, 163, 0],
    [226, 162, 0],
    [226, 161, 0],
    [226, 159, 0],
    [226, 158, 0],
    [226, 157, 0],
    [226, 155, 0],
    [226, 154, 0],
    [226, 153, 0],
    [226, 151, 0],
    [227, 150, 0],
    [227, 148, 0],
    [227, 147, 0],
    [227, 146, 0],
    [227, 144, 0],
    [228, 141, 0],
    [228, 138, 0],
    [229, 134, 0],
    [230, 130, 0],
    [230, 127, 0],
    [231, 123, 0],
    [232, 119, 0],
    [233, 116, 0],
    [233, 112, 0],
    [234, 108, 0],
    [235, 105, 0],
    [235, 101, 0],
    [236, 97, 0],
    [237, 94, 0],
    [237, 90, 0],
    [238, 86, 0],
    [239, 83, 0],
    [240, 79, 0],
    [240, 76, 0],
    [241, 72, 0],
    [242, 68, 0],
    [242, 65, 0],
    [243, 61, 0],
    [244, 57, 0],
    [245, 54, 0],
    [245, 50, 0],
    [246, 46, 0],
    [247, 43, 0],
    [247, 39, 0],
    [248, 35, 0],
    [249, 32, 0],
    [250, 28, 0],
    [250, 24, 0],
    [251, 21, 0],
    [252, 17, 0],
    [252, 14, 0],
    [253, 10, 0],
    [254, 6, 0],
    [254, 3, 0],
    [253, 0, 0],
    [247, 0, 0],
    [241, 0, 0],
    [234, 0, 0],
    [228, 0, 0],
    [222, 0, 0],
    [216, 0, 0],
    [209, 0, 0],
    [203, 0, 0],
    [197, 0, 0],
    [191, 0, 0],
    [184, 0, 0],
    [178, 0, 0],
    [172, 0, 0],
    [166, 0, 0],
    [159, 0, 0],
    [153, 0, 0],
    [147, 0, 0],
    [141, 0, 0],
    [134, 0, 0],
    [128, 0, 0],
]

# Position values corresponding to the RGB colors (0.0 to 1.0)
def get_positions(num_colors=None):
    if num_colors is None:
        num_colors = 256
    return np.linspace(0.0, 1.0, num_colors)

# Pre-generated position values
_positions_256 = [
    0.000000, 0.003922, 0.007843, 0.011765, 0.015686, 0.019608, 0.023529, 0.027451, 0.031373, 0.035294,
    0.039216, 0.043137, 0.047059, 0.050980, 0.054902, 0.058824, 0.062745, 0.066667, 0.070588, 0.074510,
    0.078431, 0.082353, 0.086275, 0.090196, 0.094118, 0.098039, 0.101961, 0.105882, 0.109804, 0.113725,
    0.117647, 0.121569, 0.125490, 0.129412, 0.133333, 0.137255, 0.141176, 0.145098, 0.149020, 0.152941,
    0.156863, 0.160784, 0.164706, 0.168627, 0.172549, 0.176471, 0.180392, 0.184314, 0.188235, 0.192157,
    0.196078, 0.200000, 0.203922, 0.207843, 0.211765, 0.215686, 0.219608, 0.223529, 0.227451, 0.231373,
    0.235294, 0.239216, 0.243137, 0.247059, 0.250980, 0.254902, 0.258824, 0.262745, 0.266667, 0.270588,
    0.274510, 0.278431, 0.282353, 0.286275, 0.290196, 0.294118, 0.298039, 0.301961, 0.305882, 0.309804,
    0.313725, 0.317647, 0.321569, 0.325490, 0.329412, 0.333333, 0.337255, 0.341176, 0.345098, 0.349020,
    0.352941, 0.356863, 0.360784, 0.364706, 0.368627, 0.372549, 0.376471, 0.380392, 0.384314, 0.388235,
    0.392157, 0.396078, 0.400000, 0.403922, 0.407843, 0.411765, 0.415686, 0.419608, 0.423529, 0.427451,
    0.431373, 0.435294, 0.439216, 0.443137, 0.447059, 0.450980, 0.454902, 0.458824, 0.462745, 0.466667,
    0.470588, 0.474510, 0.478431, 0.482353, 0.486275, 0.490196, 0.494118, 0.498039, 0.501961, 0.505882,
    0.509804, 0.513725, 0.517647, 0.521569, 0.525490, 0.529412, 0.533333, 0.537255, 0.541176, 0.545098,
    0.549020, 0.552941, 0.556863, 0.560784, 0.564706, 0.568627, 0.572549, 0.576471, 0.580392, 0.584314,
    0.588235, 0.592157, 0.596078, 0.600000, 0.603922, 0.607843, 0.611765, 0.615686, 0.619608, 0.623529,
    0.627451, 0.631373, 0.635294, 0.639216, 0.643137, 0.647059, 0.650980, 0.654902, 0.658824, 0.662745,
    0.666667, 0.670588, 0.674510, 0.678431, 0.682353, 0.686275, 0.690196, 0.694118, 0.698039, 0.701961,
    0.705882, 0.709804, 0.713725, 0.717647, 0.721569, 0.725490, 0.729412, 0.733333, 0.737255, 0.741176,
    0.745098, 0.749020, 0.752941, 0.756863, 0.760784, 0.764706, 0.768627, 0.772549, 0.776471, 0.780392,
    0.784314, 0.788235, 0.792157, 0.796078, 0.800000, 0.803922, 0.807843, 0.811765, 0.815686, 0.819608,
    0.823529, 0.827451, 0.831373, 0.835294, 0.839216, 0.843137, 0.847059, 0.850980, 0.854902, 0.858824,
    0.862745, 0.866667, 0.870588, 0.874510, 0.878431, 0.882353, 0.886275, 0.890196, 0.894118, 0.898039,
    0.901961, 0.905882, 0.909804, 0.913725, 0.917647, 0.921569, 0.925490, 0.929412, 0.933333, 0.937255,
    0.941176, 0.945098, 0.949020, 0.952941, 0.956863, 0.960784, 0.964706, 0.968627, 0.972549, 0.976471,
    0.980392, 0.984314, 0.988235, 0.992157, 0.996078, 1.000000,
]

COLORMAPS = dict()
# Create a dictionary to store colormaps
COLORMAPS = {}

# Add the turbo colormap with its colors and positions as features
COLORMAPS['turbo'] = {
    'colors': _rgb_array_256,
    'positions': _positions_256
}

# Example usage
if __name__ == '__main__':
    colormap = create_colormap()
    # Use with PlotPy: item.set_color_map(colormap)
    
    # Get the RGB array and positions for custom usage
    rgb_values = get_rgb_array()  # Default 256 colors
    positions = get_positions()
    
    # Or specify a different number of colors
    rgb_values_256 = get_rgb_array(256)
    positions_256 = get_positions(256)
    
    # These can be used for custom color interpolation
    # Each rgb_values[i] corresponds to positions[i]

    
